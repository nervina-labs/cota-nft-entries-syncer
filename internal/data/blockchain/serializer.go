// Generated by Molecule 0.7.2
// Generated by Moleculec-Go 0.1.8

package blockchain

import (
	"bytes"
	"encoding/binary"
	"errors"
	"strconv"
	"strings"
)

type Number uint32

const HeaderSizeUint uint32 = 4

// Byte is the primitive type
type Byte [1]byte

func NewByte(b byte) Byte {
	return Byte([1]byte{b})
}
func ByteDefault() Byte {
	return Byte([1]byte{0})
}
func ByteFromSliceUnchecked(slice []byte) *Byte {
	b := new(Byte)
	b[0] = slice[0]
	return b
}
func (b *Byte) AsSlice() []byte {
	return b[:]
}
func ByteFromSlice(slice []byte, _compatible bool) (*Byte, error) {
	if len(slice) != 1 {
		return nil, errors.New("TotalSizeNotMatch")
	}
	b := new(Byte)
	b[0] = slice[0]
	return b, nil
}
func unpackNumber(b []byte) Number {
	bytesBuffer := bytes.NewBuffer(b)
	var x Number
	binary.Read(bytesBuffer, binary.LittleEndian, &x)
	return x
}
func packNumber(num Number) []byte {
	b := make([]byte, 4)
	binary.LittleEndian.PutUint32(b, uint32(num))
	return b
}

type Uint32Builder struct {
	inner [4]Byte
}

func NewUint32Builder() *Uint32Builder {
	return &Uint32Builder{inner: [4]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *Uint32Builder) Build() Uint32 {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Uint32{inner: b.Bytes()}
}

func (s *Uint32Builder) Set(v [4]Byte) *Uint32Builder {
	s.inner = v
	return s
}

func (s *Uint32Builder) Nth0(v Byte) *Uint32Builder {
	s.inner[0] = v
	return s
}

func (s *Uint32Builder) Nth1(v Byte) *Uint32Builder {
	s.inner[1] = v
	return s
}

func (s *Uint32Builder) Nth2(v Byte) *Uint32Builder {
	s.inner[2] = v
	return s
}

func (s *Uint32Builder) Nth3(v Byte) *Uint32Builder {
	s.inner[3] = v
	return s
}

type Uint32 struct {
	inner []byte
}

func Uint32FromSliceUnchecked(slice []byte) *Uint32 {
	return &Uint32{inner: slice}
}
func (s *Uint32) AsSlice() []byte {
	return s.inner
}

func Uint32Default() Uint32 {
	return *Uint32FromSliceUnchecked([]byte{0, 0, 0, 0})
}

func Uint32FromSlice(slice []byte, _compatible bool) (*Uint32, error) {
	sliceLen := len(slice)
	if sliceLen != 4 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Uint32", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(4)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Uint32{inner: slice}, nil
}

func (s *Uint32) RawData() []byte {
	return s.inner
}

func (s *Uint32) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Uint32) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Uint32) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Uint32) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Uint32) AsBuilder() Uint32Builder {
	t := NewUint32Builder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	return *t
}

type Uint64Builder struct {
	inner [8]Byte
}

func NewUint64Builder() *Uint64Builder {
	return &Uint64Builder{inner: [8]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *Uint64Builder) Build() Uint64 {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Uint64{inner: b.Bytes()}
}

func (s *Uint64Builder) Set(v [8]Byte) *Uint64Builder {
	s.inner = v
	return s
}

func (s *Uint64Builder) Nth0(v Byte) *Uint64Builder {
	s.inner[0] = v
	return s
}

func (s *Uint64Builder) Nth1(v Byte) *Uint64Builder {
	s.inner[1] = v
	return s
}

func (s *Uint64Builder) Nth2(v Byte) *Uint64Builder {
	s.inner[2] = v
	return s
}

func (s *Uint64Builder) Nth3(v Byte) *Uint64Builder {
	s.inner[3] = v
	return s
}

func (s *Uint64Builder) Nth4(v Byte) *Uint64Builder {
	s.inner[4] = v
	return s
}

func (s *Uint64Builder) Nth5(v Byte) *Uint64Builder {
	s.inner[5] = v
	return s
}

func (s *Uint64Builder) Nth6(v Byte) *Uint64Builder {
	s.inner[6] = v
	return s
}

func (s *Uint64Builder) Nth7(v Byte) *Uint64Builder {
	s.inner[7] = v
	return s
}

type Uint64 struct {
	inner []byte
}

func Uint64FromSliceUnchecked(slice []byte) *Uint64 {
	return &Uint64{inner: slice}
}
func (s *Uint64) AsSlice() []byte {
	return s.inner
}

func Uint64Default() Uint64 {
	return *Uint64FromSliceUnchecked([]byte{0, 0, 0, 0, 0, 0, 0, 0})
}

func Uint64FromSlice(slice []byte, _compatible bool) (*Uint64, error) {
	sliceLen := len(slice)
	if sliceLen != 8 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Uint64", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(8)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Uint64{inner: slice}, nil
}

func (s *Uint64) RawData() []byte {
	return s.inner
}

func (s *Uint64) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Uint64) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Uint64) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Uint64) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Uint64) Nth4() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[4:5])
	return ret
}

func (s *Uint64) Nth5() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[5:6])
	return ret
}

func (s *Uint64) Nth6() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[6:7])
	return ret
}

func (s *Uint64) Nth7() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[7:8])
	return ret
}

func (s *Uint64) AsBuilder() Uint64Builder {
	t := NewUint64Builder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	t.Nth4(*s.Nth4())
	t.Nth5(*s.Nth5())
	t.Nth6(*s.Nth6())
	t.Nth7(*s.Nth7())
	return *t
}

type Uint128Builder struct {
	inner [16]Byte
}

func NewUint128Builder() *Uint128Builder {
	return &Uint128Builder{inner: [16]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *Uint128Builder) Build() Uint128 {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Uint128{inner: b.Bytes()}
}

func (s *Uint128Builder) Set(v [16]Byte) *Uint128Builder {
	s.inner = v
	return s
}

func (s *Uint128Builder) Nth0(v Byte) *Uint128Builder {
	s.inner[0] = v
	return s
}

func (s *Uint128Builder) Nth1(v Byte) *Uint128Builder {
	s.inner[1] = v
	return s
}

func (s *Uint128Builder) Nth2(v Byte) *Uint128Builder {
	s.inner[2] = v
	return s
}

func (s *Uint128Builder) Nth3(v Byte) *Uint128Builder {
	s.inner[3] = v
	return s
}

func (s *Uint128Builder) Nth4(v Byte) *Uint128Builder {
	s.inner[4] = v
	return s
}

func (s *Uint128Builder) Nth5(v Byte) *Uint128Builder {
	s.inner[5] = v
	return s
}

func (s *Uint128Builder) Nth6(v Byte) *Uint128Builder {
	s.inner[6] = v
	return s
}

func (s *Uint128Builder) Nth7(v Byte) *Uint128Builder {
	s.inner[7] = v
	return s
}

func (s *Uint128Builder) Nth8(v Byte) *Uint128Builder {
	s.inner[8] = v
	return s
}

func (s *Uint128Builder) Nth9(v Byte) *Uint128Builder {
	s.inner[9] = v
	return s
}

func (s *Uint128Builder) Nth10(v Byte) *Uint128Builder {
	s.inner[10] = v
	return s
}

func (s *Uint128Builder) Nth11(v Byte) *Uint128Builder {
	s.inner[11] = v
	return s
}

func (s *Uint128Builder) Nth12(v Byte) *Uint128Builder {
	s.inner[12] = v
	return s
}

func (s *Uint128Builder) Nth13(v Byte) *Uint128Builder {
	s.inner[13] = v
	return s
}

func (s *Uint128Builder) Nth14(v Byte) *Uint128Builder {
	s.inner[14] = v
	return s
}

func (s *Uint128Builder) Nth15(v Byte) *Uint128Builder {
	s.inner[15] = v
	return s
}

type Uint128 struct {
	inner []byte
}

func Uint128FromSliceUnchecked(slice []byte) *Uint128 {
	return &Uint128{inner: slice}
}
func (s *Uint128) AsSlice() []byte {
	return s.inner
}

func Uint128Default() Uint128 {
	return *Uint128FromSliceUnchecked([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func Uint128FromSlice(slice []byte, _compatible bool) (*Uint128, error) {
	sliceLen := len(slice)
	if sliceLen != 16 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Uint128", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(16)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Uint128{inner: slice}, nil
}

func (s *Uint128) RawData() []byte {
	return s.inner
}

func (s *Uint128) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Uint128) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Uint128) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Uint128) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Uint128) Nth4() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[4:5])
	return ret
}

func (s *Uint128) Nth5() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[5:6])
	return ret
}

func (s *Uint128) Nth6() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[6:7])
	return ret
}

func (s *Uint128) Nth7() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[7:8])
	return ret
}

func (s *Uint128) Nth8() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[8:9])
	return ret
}

func (s *Uint128) Nth9() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[9:10])
	return ret
}

func (s *Uint128) Nth10() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[10:11])
	return ret
}

func (s *Uint128) Nth11() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[11:12])
	return ret
}

func (s *Uint128) Nth12() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[12:13])
	return ret
}

func (s *Uint128) Nth13() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[13:14])
	return ret
}

func (s *Uint128) Nth14() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[14:15])
	return ret
}

func (s *Uint128) Nth15() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[15:16])
	return ret
}

func (s *Uint128) AsBuilder() Uint128Builder {
	t := NewUint128Builder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	t.Nth4(*s.Nth4())
	t.Nth5(*s.Nth5())
	t.Nth6(*s.Nth6())
	t.Nth7(*s.Nth7())
	t.Nth8(*s.Nth8())
	t.Nth9(*s.Nth9())
	t.Nth10(*s.Nth10())
	t.Nth11(*s.Nth11())
	t.Nth12(*s.Nth12())
	t.Nth13(*s.Nth13())
	t.Nth14(*s.Nth14())
	t.Nth15(*s.Nth15())
	return *t
}

type Byte32Builder struct {
	inner [32]Byte
}

func NewByte32Builder() *Byte32Builder {
	return &Byte32Builder{inner: [32]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *Byte32Builder) Build() Byte32 {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Byte32{inner: b.Bytes()}
}

func (s *Byte32Builder) Set(v [32]Byte) *Byte32Builder {
	s.inner = v
	return s
}

func (s *Byte32Builder) Nth0(v Byte) *Byte32Builder {
	s.inner[0] = v
	return s
}

func (s *Byte32Builder) Nth1(v Byte) *Byte32Builder {
	s.inner[1] = v
	return s
}

func (s *Byte32Builder) Nth2(v Byte) *Byte32Builder {
	s.inner[2] = v
	return s
}

func (s *Byte32Builder) Nth3(v Byte) *Byte32Builder {
	s.inner[3] = v
	return s
}

func (s *Byte32Builder) Nth4(v Byte) *Byte32Builder {
	s.inner[4] = v
	return s
}

func (s *Byte32Builder) Nth5(v Byte) *Byte32Builder {
	s.inner[5] = v
	return s
}

func (s *Byte32Builder) Nth6(v Byte) *Byte32Builder {
	s.inner[6] = v
	return s
}

func (s *Byte32Builder) Nth7(v Byte) *Byte32Builder {
	s.inner[7] = v
	return s
}

func (s *Byte32Builder) Nth8(v Byte) *Byte32Builder {
	s.inner[8] = v
	return s
}

func (s *Byte32Builder) Nth9(v Byte) *Byte32Builder {
	s.inner[9] = v
	return s
}

func (s *Byte32Builder) Nth10(v Byte) *Byte32Builder {
	s.inner[10] = v
	return s
}

func (s *Byte32Builder) Nth11(v Byte) *Byte32Builder {
	s.inner[11] = v
	return s
}

func (s *Byte32Builder) Nth12(v Byte) *Byte32Builder {
	s.inner[12] = v
	return s
}

func (s *Byte32Builder) Nth13(v Byte) *Byte32Builder {
	s.inner[13] = v
	return s
}

func (s *Byte32Builder) Nth14(v Byte) *Byte32Builder {
	s.inner[14] = v
	return s
}

func (s *Byte32Builder) Nth15(v Byte) *Byte32Builder {
	s.inner[15] = v
	return s
}

func (s *Byte32Builder) Nth16(v Byte) *Byte32Builder {
	s.inner[16] = v
	return s
}

func (s *Byte32Builder) Nth17(v Byte) *Byte32Builder {
	s.inner[17] = v
	return s
}

func (s *Byte32Builder) Nth18(v Byte) *Byte32Builder {
	s.inner[18] = v
	return s
}

func (s *Byte32Builder) Nth19(v Byte) *Byte32Builder {
	s.inner[19] = v
	return s
}

func (s *Byte32Builder) Nth20(v Byte) *Byte32Builder {
	s.inner[20] = v
	return s
}

func (s *Byte32Builder) Nth21(v Byte) *Byte32Builder {
	s.inner[21] = v
	return s
}

func (s *Byte32Builder) Nth22(v Byte) *Byte32Builder {
	s.inner[22] = v
	return s
}

func (s *Byte32Builder) Nth23(v Byte) *Byte32Builder {
	s.inner[23] = v
	return s
}

func (s *Byte32Builder) Nth24(v Byte) *Byte32Builder {
	s.inner[24] = v
	return s
}

func (s *Byte32Builder) Nth25(v Byte) *Byte32Builder {
	s.inner[25] = v
	return s
}

func (s *Byte32Builder) Nth26(v Byte) *Byte32Builder {
	s.inner[26] = v
	return s
}

func (s *Byte32Builder) Nth27(v Byte) *Byte32Builder {
	s.inner[27] = v
	return s
}

func (s *Byte32Builder) Nth28(v Byte) *Byte32Builder {
	s.inner[28] = v
	return s
}

func (s *Byte32Builder) Nth29(v Byte) *Byte32Builder {
	s.inner[29] = v
	return s
}

func (s *Byte32Builder) Nth30(v Byte) *Byte32Builder {
	s.inner[30] = v
	return s
}

func (s *Byte32Builder) Nth31(v Byte) *Byte32Builder {
	s.inner[31] = v
	return s
}

type Byte32 struct {
	inner []byte
}

func Byte32FromSliceUnchecked(slice []byte) *Byte32 {
	return &Byte32{inner: slice}
}
func (s *Byte32) AsSlice() []byte {
	return s.inner
}

func Byte32Default() Byte32 {
	return *Byte32FromSliceUnchecked([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func Byte32FromSlice(slice []byte, _compatible bool) (*Byte32, error) {
	sliceLen := len(slice)
	if sliceLen != 32 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Byte32", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(32)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Byte32{inner: slice}, nil
}

func (s *Byte32) RawData() []byte {
	return s.inner
}

func (s *Byte32) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Byte32) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Byte32) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Byte32) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Byte32) Nth4() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[4:5])
	return ret
}

func (s *Byte32) Nth5() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[5:6])
	return ret
}

func (s *Byte32) Nth6() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[6:7])
	return ret
}

func (s *Byte32) Nth7() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[7:8])
	return ret
}

func (s *Byte32) Nth8() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[8:9])
	return ret
}

func (s *Byte32) Nth9() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[9:10])
	return ret
}

func (s *Byte32) Nth10() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[10:11])
	return ret
}

func (s *Byte32) Nth11() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[11:12])
	return ret
}

func (s *Byte32) Nth12() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[12:13])
	return ret
}

func (s *Byte32) Nth13() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[13:14])
	return ret
}

func (s *Byte32) Nth14() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[14:15])
	return ret
}

func (s *Byte32) Nth15() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[15:16])
	return ret
}

func (s *Byte32) Nth16() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[16:17])
	return ret
}

func (s *Byte32) Nth17() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[17:18])
	return ret
}

func (s *Byte32) Nth18() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[18:19])
	return ret
}

func (s *Byte32) Nth19() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[19:20])
	return ret
}

func (s *Byte32) Nth20() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[20:21])
	return ret
}

func (s *Byte32) Nth21() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[21:22])
	return ret
}

func (s *Byte32) Nth22() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[22:23])
	return ret
}

func (s *Byte32) Nth23() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[23:24])
	return ret
}

func (s *Byte32) Nth24() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[24:25])
	return ret
}

func (s *Byte32) Nth25() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[25:26])
	return ret
}

func (s *Byte32) Nth26() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[26:27])
	return ret
}

func (s *Byte32) Nth27() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[27:28])
	return ret
}

func (s *Byte32) Nth28() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[28:29])
	return ret
}

func (s *Byte32) Nth29() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[29:30])
	return ret
}

func (s *Byte32) Nth30() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[30:31])
	return ret
}

func (s *Byte32) Nth31() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[31:32])
	return ret
}

func (s *Byte32) AsBuilder() Byte32Builder {
	t := NewByte32Builder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	t.Nth4(*s.Nth4())
	t.Nth5(*s.Nth5())
	t.Nth6(*s.Nth6())
	t.Nth7(*s.Nth7())
	t.Nth8(*s.Nth8())
	t.Nth9(*s.Nth9())
	t.Nth10(*s.Nth10())
	t.Nth11(*s.Nth11())
	t.Nth12(*s.Nth12())
	t.Nth13(*s.Nth13())
	t.Nth14(*s.Nth14())
	t.Nth15(*s.Nth15())
	t.Nth16(*s.Nth16())
	t.Nth17(*s.Nth17())
	t.Nth18(*s.Nth18())
	t.Nth19(*s.Nth19())
	t.Nth20(*s.Nth20())
	t.Nth21(*s.Nth21())
	t.Nth22(*s.Nth22())
	t.Nth23(*s.Nth23())
	t.Nth24(*s.Nth24())
	t.Nth25(*s.Nth25())
	t.Nth26(*s.Nth26())
	t.Nth27(*s.Nth27())
	t.Nth28(*s.Nth28())
	t.Nth29(*s.Nth29())
	t.Nth30(*s.Nth30())
	t.Nth31(*s.Nth31())
	return *t
}

type Uint256Builder struct {
	inner [32]Byte
}

func NewUint256Builder() *Uint256Builder {
	return &Uint256Builder{inner: [32]Byte{ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault(), ByteDefault()}}
}

func (s *Uint256Builder) Build() Uint256 {
	b := new(bytes.Buffer)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}
	return Uint256{inner: b.Bytes()}
}

func (s *Uint256Builder) Set(v [32]Byte) *Uint256Builder {
	s.inner = v
	return s
}

func (s *Uint256Builder) Nth0(v Byte) *Uint256Builder {
	s.inner[0] = v
	return s
}

func (s *Uint256Builder) Nth1(v Byte) *Uint256Builder {
	s.inner[1] = v
	return s
}

func (s *Uint256Builder) Nth2(v Byte) *Uint256Builder {
	s.inner[2] = v
	return s
}

func (s *Uint256Builder) Nth3(v Byte) *Uint256Builder {
	s.inner[3] = v
	return s
}

func (s *Uint256Builder) Nth4(v Byte) *Uint256Builder {
	s.inner[4] = v
	return s
}

func (s *Uint256Builder) Nth5(v Byte) *Uint256Builder {
	s.inner[5] = v
	return s
}

func (s *Uint256Builder) Nth6(v Byte) *Uint256Builder {
	s.inner[6] = v
	return s
}

func (s *Uint256Builder) Nth7(v Byte) *Uint256Builder {
	s.inner[7] = v
	return s
}

func (s *Uint256Builder) Nth8(v Byte) *Uint256Builder {
	s.inner[8] = v
	return s
}

func (s *Uint256Builder) Nth9(v Byte) *Uint256Builder {
	s.inner[9] = v
	return s
}

func (s *Uint256Builder) Nth10(v Byte) *Uint256Builder {
	s.inner[10] = v
	return s
}

func (s *Uint256Builder) Nth11(v Byte) *Uint256Builder {
	s.inner[11] = v
	return s
}

func (s *Uint256Builder) Nth12(v Byte) *Uint256Builder {
	s.inner[12] = v
	return s
}

func (s *Uint256Builder) Nth13(v Byte) *Uint256Builder {
	s.inner[13] = v
	return s
}

func (s *Uint256Builder) Nth14(v Byte) *Uint256Builder {
	s.inner[14] = v
	return s
}

func (s *Uint256Builder) Nth15(v Byte) *Uint256Builder {
	s.inner[15] = v
	return s
}

func (s *Uint256Builder) Nth16(v Byte) *Uint256Builder {
	s.inner[16] = v
	return s
}

func (s *Uint256Builder) Nth17(v Byte) *Uint256Builder {
	s.inner[17] = v
	return s
}

func (s *Uint256Builder) Nth18(v Byte) *Uint256Builder {
	s.inner[18] = v
	return s
}

func (s *Uint256Builder) Nth19(v Byte) *Uint256Builder {
	s.inner[19] = v
	return s
}

func (s *Uint256Builder) Nth20(v Byte) *Uint256Builder {
	s.inner[20] = v
	return s
}

func (s *Uint256Builder) Nth21(v Byte) *Uint256Builder {
	s.inner[21] = v
	return s
}

func (s *Uint256Builder) Nth22(v Byte) *Uint256Builder {
	s.inner[22] = v
	return s
}

func (s *Uint256Builder) Nth23(v Byte) *Uint256Builder {
	s.inner[23] = v
	return s
}

func (s *Uint256Builder) Nth24(v Byte) *Uint256Builder {
	s.inner[24] = v
	return s
}

func (s *Uint256Builder) Nth25(v Byte) *Uint256Builder {
	s.inner[25] = v
	return s
}

func (s *Uint256Builder) Nth26(v Byte) *Uint256Builder {
	s.inner[26] = v
	return s
}

func (s *Uint256Builder) Nth27(v Byte) *Uint256Builder {
	s.inner[27] = v
	return s
}

func (s *Uint256Builder) Nth28(v Byte) *Uint256Builder {
	s.inner[28] = v
	return s
}

func (s *Uint256Builder) Nth29(v Byte) *Uint256Builder {
	s.inner[29] = v
	return s
}

func (s *Uint256Builder) Nth30(v Byte) *Uint256Builder {
	s.inner[30] = v
	return s
}

func (s *Uint256Builder) Nth31(v Byte) *Uint256Builder {
	s.inner[31] = v
	return s
}

type Uint256 struct {
	inner []byte
}

func Uint256FromSliceUnchecked(slice []byte) *Uint256 {
	return &Uint256{inner: slice}
}
func (s *Uint256) AsSlice() []byte {
	return s.inner
}

func Uint256Default() Uint256 {
	return *Uint256FromSliceUnchecked([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func Uint256FromSlice(slice []byte, _compatible bool) (*Uint256, error) {
	sliceLen := len(slice)
	if sliceLen != 32 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Uint256", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(32)}, " ")
		return nil, errors.New(errMsg)
	}
	return &Uint256{inner: slice}, nil
}

func (s *Uint256) RawData() []byte {
	return s.inner
}

func (s *Uint256) Nth0() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[0:1])
	return ret
}

func (s *Uint256) Nth1() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[1:2])
	return ret
}

func (s *Uint256) Nth2() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[2:3])
	return ret
}

func (s *Uint256) Nth3() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[3:4])
	return ret
}

func (s *Uint256) Nth4() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[4:5])
	return ret
}

func (s *Uint256) Nth5() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[5:6])
	return ret
}

func (s *Uint256) Nth6() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[6:7])
	return ret
}

func (s *Uint256) Nth7() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[7:8])
	return ret
}

func (s *Uint256) Nth8() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[8:9])
	return ret
}

func (s *Uint256) Nth9() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[9:10])
	return ret
}

func (s *Uint256) Nth10() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[10:11])
	return ret
}

func (s *Uint256) Nth11() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[11:12])
	return ret
}

func (s *Uint256) Nth12() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[12:13])
	return ret
}

func (s *Uint256) Nth13() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[13:14])
	return ret
}

func (s *Uint256) Nth14() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[14:15])
	return ret
}

func (s *Uint256) Nth15() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[15:16])
	return ret
}

func (s *Uint256) Nth16() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[16:17])
	return ret
}

func (s *Uint256) Nth17() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[17:18])
	return ret
}

func (s *Uint256) Nth18() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[18:19])
	return ret
}

func (s *Uint256) Nth19() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[19:20])
	return ret
}

func (s *Uint256) Nth20() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[20:21])
	return ret
}

func (s *Uint256) Nth21() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[21:22])
	return ret
}

func (s *Uint256) Nth22() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[22:23])
	return ret
}

func (s *Uint256) Nth23() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[23:24])
	return ret
}

func (s *Uint256) Nth24() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[24:25])
	return ret
}

func (s *Uint256) Nth25() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[25:26])
	return ret
}

func (s *Uint256) Nth26() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[26:27])
	return ret
}

func (s *Uint256) Nth27() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[27:28])
	return ret
}

func (s *Uint256) Nth28() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[28:29])
	return ret
}

func (s *Uint256) Nth29() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[29:30])
	return ret
}

func (s *Uint256) Nth30() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[30:31])
	return ret
}

func (s *Uint256) Nth31() *Byte {
	ret := ByteFromSliceUnchecked(s.inner[31:32])
	return ret
}

func (s *Uint256) AsBuilder() Uint256Builder {
	t := NewUint256Builder()
	t.Nth0(*s.Nth0())
	t.Nth1(*s.Nth1())
	t.Nth2(*s.Nth2())
	t.Nth3(*s.Nth3())
	t.Nth4(*s.Nth4())
	t.Nth5(*s.Nth5())
	t.Nth6(*s.Nth6())
	t.Nth7(*s.Nth7())
	t.Nth8(*s.Nth8())
	t.Nth9(*s.Nth9())
	t.Nth10(*s.Nth10())
	t.Nth11(*s.Nth11())
	t.Nth12(*s.Nth12())
	t.Nth13(*s.Nth13())
	t.Nth14(*s.Nth14())
	t.Nth15(*s.Nth15())
	t.Nth16(*s.Nth16())
	t.Nth17(*s.Nth17())
	t.Nth18(*s.Nth18())
	t.Nth19(*s.Nth19())
	t.Nth20(*s.Nth20())
	t.Nth21(*s.Nth21())
	t.Nth22(*s.Nth22())
	t.Nth23(*s.Nth23())
	t.Nth24(*s.Nth24())
	t.Nth25(*s.Nth25())
	t.Nth26(*s.Nth26())
	t.Nth27(*s.Nth27())
	t.Nth28(*s.Nth28())
	t.Nth29(*s.Nth29())
	t.Nth30(*s.Nth30())
	t.Nth31(*s.Nth31())
	return *t
}

type BytesBuilder struct {
	inner []Byte
}

func (s *BytesBuilder) Build() Bytes {
	size := packNumber(Number(len(s.inner)))

	b := new(bytes.Buffer)

	b.Write(size)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	sb := Bytes{inner: b.Bytes()}

	return sb
}

func (s *BytesBuilder) Set(v []Byte) *BytesBuilder {
	s.inner = v
	return s
}
func (s *BytesBuilder) Push(v Byte) *BytesBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *BytesBuilder) Extend(iter []Byte) *BytesBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}

func NewBytesBuilder() *BytesBuilder {
	return &BytesBuilder{[]Byte{}}
}

type Bytes struct {
	inner []byte
}

func BytesFromSliceUnchecked(slice []byte) *Bytes {
	return &Bytes{inner: slice}
}
func (s *Bytes) AsSlice() []byte {
	return s.inner
}

func BytesDefault() Bytes {
	return *BytesFromSliceUnchecked([]byte{0, 0, 0, 0})
}

func BytesFromSlice(slice []byte, _compatible bool) (*Bytes, error) {
	sliceLen := len(slice)
	if sliceLen < int(HeaderSizeUint) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Bytes", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := unpackNumber(slice)
	if itemCount == 0 {
		if sliceLen != int(HeaderSizeUint) {
			errMsg := strings.Join([]string{"TotalSizeNotMatch", "Bytes", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(HeaderSizeUint))}, " ")
			return nil, errors.New(errMsg)
		}
		return &Bytes{inner: slice}, nil
	}
	totalSize := int(HeaderSizeUint) + int(1*itemCount)
	if sliceLen != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Bytes", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}
	return &Bytes{inner: slice}, nil
}

func (s *Bytes) TotalSize() uint {
	return uint(HeaderSizeUint) + 1*s.ItemCount()
}
func (s *Bytes) ItemCount() uint {
	number := uint(unpackNumber(s.inner))
	return number
}
func (s *Bytes) Len() uint {
	return s.ItemCount()
}
func (s *Bytes) IsEmpty() bool {
	return s.Len() == 0
}

// if *Byte is nil, index is out of bounds
func (s *Bytes) Get(index uint) *Byte {
	var re *Byte
	if index < s.Len() {
		start := uint(HeaderSizeUint) + 1*index
		end := start + 1
		re = ByteFromSliceUnchecked(s.inner[start:end])
	}
	return re
}

func (s *Bytes) RawData() []byte {
	return s.inner[HeaderSizeUint:]
}

func (s *Bytes) AsBuilder() BytesBuilder {
	size := s.ItemCount()
	t := NewBytesBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type BytesOptBuilder struct {
	isNone bool
	inner  Bytes
}

func NewBytesOptBuilder() *BytesOptBuilder {
	return &BytesOptBuilder{isNone: true, inner: BytesDefault()}
}
func (s *BytesOptBuilder) Set(v Bytes) *BytesOptBuilder {
	s.isNone = false
	s.inner = v
	return s
}
func (s *BytesOptBuilder) Build() BytesOpt {
	var ret BytesOpt
	if s.isNone {
		ret = BytesOpt{inner: []byte{}}
	} else {
		ret = BytesOpt{inner: s.inner.AsSlice()}
	}
	return ret
}

type BytesOpt struct {
	inner []byte
}

func BytesOptFromSliceUnchecked(slice []byte) *BytesOpt {
	return &BytesOpt{inner: slice}
}
func (s *BytesOpt) AsSlice() []byte {
	return s.inner
}

func BytesOptDefault() BytesOpt {
	return *BytesOptFromSliceUnchecked([]byte{})
}

func BytesOptFromSlice(slice []byte, compatible bool) (*BytesOpt, error) {
	if len(slice) == 0 {
		return &BytesOpt{inner: slice}, nil
	}

	_, err := BytesFromSlice(slice, compatible)
	if err != nil {
		return nil, err
	}
	return &BytesOpt{inner: slice}, nil
}

func (s *BytesOpt) IntoBytes() (*Bytes, error) {
	if s.IsNone() {
		return nil, errors.New("No data")
	}
	return BytesFromSliceUnchecked(s.AsSlice()), nil
}
func (s *BytesOpt) IsSome() bool {
	return len(s.inner) != 0
}
func (s *BytesOpt) IsNone() bool {
	return len(s.inner) == 0
}
func (s *BytesOpt) AsBuilder() BytesOptBuilder {
	var ret = NewBytesOptBuilder()
	if s.IsSome() {
		ret.Set(*BytesFromSliceUnchecked(s.AsSlice()))
	}
	return *ret
}

type BytesVecBuilder struct {
	inner []Bytes
}

func (s *BytesVecBuilder) Build() BytesVec {
	itemCount := len(s.inner)

	b := new(bytes.Buffer)

	// Empty dyn vector, just return size's bytes
	if itemCount == 0 {
		b.Write(packNumber(Number(HeaderSizeUint)))
		return BytesVec{inner: b.Bytes()}
	}

	// Calculate first offset then loop for rest items offsets
	totalSize := HeaderSizeUint * uint32(itemCount+1)
	offsets := make([]uint32, 0, itemCount)
	offsets = append(offsets, totalSize)
	for i := 1; i < itemCount; i++ {
		totalSize += uint32(len(s.inner[i-1].AsSlice()))
		offsets = append(offsets, offsets[i-1]+uint32(len(s.inner[i-1].AsSlice())))
	}
	totalSize += uint32(len(s.inner[itemCount-1].AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < itemCount; i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	for i := 0; i < itemCount; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	return BytesVec{inner: b.Bytes()}
}

func (s *BytesVecBuilder) Set(v []Bytes) *BytesVecBuilder {
	s.inner = v
	return s
}
func (s *BytesVecBuilder) Push(v Bytes) *BytesVecBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *BytesVecBuilder) Extend(iter []Bytes) *BytesVecBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}

func NewBytesVecBuilder() *BytesVecBuilder {
	return &BytesVecBuilder{[]Bytes{}}
}

type BytesVec struct {
	inner []byte
}

func BytesVecFromSliceUnchecked(slice []byte) *BytesVec {
	return &BytesVec{inner: slice}
}
func (s *BytesVec) AsSlice() []byte {
	return s.inner
}

func BytesVecDefault() BytesVec {
	return *BytesVecFromSliceUnchecked([]byte{4, 0, 0, 0})
}

func BytesVecFromSlice(slice []byte, compatible bool) (*BytesVec, error) {
	sliceLen := len(slice)

	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "BytesVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "BytesVec", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint {
		return &BytesVec{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "BytesVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "BytesVec", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "BytesVec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := uint32(offsetFirst)/HeaderSizeUint - 1

	offsets := make([]uint32, itemCount)

	for i := 0; i < int(itemCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}

	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			errMsg := strings.Join([]string{"OffsetsNotMatch", "BytesVec"}, " ")
			return nil, errors.New(errMsg)
		}
	}

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 {
			start := offsets[i-1]
			end := offsets[i]
			_, err := BytesFromSlice(slice[start:end], compatible)

			if err != nil {
				return nil, err
			}
		}
	}

	return &BytesVec{inner: slice}, nil
}

func (s *BytesVec) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *BytesVec) ItemCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *BytesVec) Len() uint {
	return s.ItemCount()
}
func (s *BytesVec) IsEmpty() bool {
	return s.Len() == 0
}

// if *Bytes is nil, index is out of bounds
func (s *BytesVec) Get(index uint) *Bytes {
	var b *Bytes
	if index < s.Len() {
		start_index := uint(HeaderSizeUint) * (1 + index)
		start := unpackNumber(s.inner[start_index:])

		if index == s.Len()-1 {
			b = BytesFromSliceUnchecked(s.inner[start:])
		} else {
			end_index := start_index + uint(HeaderSizeUint)
			end := unpackNumber(s.inner[end_index:])
			b = BytesFromSliceUnchecked(s.inner[start:end])
		}
	}
	return b
}

func (s *BytesVec) AsBuilder() BytesVecBuilder {
	size := s.ItemCount()
	t := NewBytesVecBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type Byte32VecBuilder struct {
	inner []Byte32
}

func (s *Byte32VecBuilder) Build() Byte32Vec {
	size := packNumber(Number(len(s.inner)))

	b := new(bytes.Buffer)

	b.Write(size)
	len := len(s.inner)
	for i := 0; i < len; i++ {
		b.Write(s.inner[i].AsSlice())
	}

	sb := Byte32Vec{inner: b.Bytes()}

	return sb
}

func (s *Byte32VecBuilder) Set(v []Byte32) *Byte32VecBuilder {
	s.inner = v
	return s
}
func (s *Byte32VecBuilder) Push(v Byte32) *Byte32VecBuilder {
	s.inner = append(s.inner, v)
	return s
}
func (s *Byte32VecBuilder) Extend(iter []Byte32) *Byte32VecBuilder {
	for i := 0; i < len(iter); i++ {
		s.inner = append(s.inner, iter[i])
	}
	return s
}

func NewByte32VecBuilder() *Byte32VecBuilder {
	return &Byte32VecBuilder{[]Byte32{}}
}

type Byte32Vec struct {
	inner []byte
}

func Byte32VecFromSliceUnchecked(slice []byte) *Byte32Vec {
	return &Byte32Vec{inner: slice}
}
func (s *Byte32Vec) AsSlice() []byte {
	return s.inner
}

func Byte32VecDefault() Byte32Vec {
	return *Byte32VecFromSliceUnchecked([]byte{0, 0, 0, 0})
}

func Byte32VecFromSlice(slice []byte, _compatible bool) (*Byte32Vec, error) {
	sliceLen := len(slice)
	if sliceLen < int(HeaderSizeUint) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Byte32Vec", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}
	itemCount := unpackNumber(slice)
	if itemCount == 0 {
		if sliceLen != int(HeaderSizeUint) {
			errMsg := strings.Join([]string{"TotalSizeNotMatch", "Byte32Vec", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(HeaderSizeUint))}, " ")
			return nil, errors.New(errMsg)
		}
		return &Byte32Vec{inner: slice}, nil
	}
	totalSize := int(HeaderSizeUint) + int(32*itemCount)
	if sliceLen != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Byte32Vec", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}
	return &Byte32Vec{inner: slice}, nil
}

func (s *Byte32Vec) TotalSize() uint {
	return uint(HeaderSizeUint) + 32*s.ItemCount()
}
func (s *Byte32Vec) ItemCount() uint {
	number := uint(unpackNumber(s.inner))
	return number
}
func (s *Byte32Vec) Len() uint {
	return s.ItemCount()
}
func (s *Byte32Vec) IsEmpty() bool {
	return s.Len() == 0
}

// if *Byte32 is nil, index is out of bounds
func (s *Byte32Vec) Get(index uint) *Byte32 {
	var re *Byte32
	if index < s.Len() {
		start := uint(HeaderSizeUint) + 32*index
		end := start + 32
		re = Byte32FromSliceUnchecked(s.inner[start:end])
	}
	return re
}

func (s *Byte32Vec) AsBuilder() Byte32VecBuilder {
	size := s.ItemCount()
	t := NewByte32VecBuilder()
	for i := uint(0); i < size; i++ {
		t.Push(*s.Get(i))
	}
	return *t
}

type ScriptBuilder struct {
	code_hash Byte32
	hash_type Byte
	args      Bytes
}

func (s *ScriptBuilder) Build() Script {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (3 + 1)
	offsets := make([]uint32, 0, 3)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.code_hash.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.hash_type.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.args.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.code_hash.AsSlice())
	b.Write(s.hash_type.AsSlice())
	b.Write(s.args.AsSlice())
	return Script{inner: b.Bytes()}
}

func (s *ScriptBuilder) CodeHash(v Byte32) *ScriptBuilder {
	s.code_hash = v
	return s
}

func (s *ScriptBuilder) HashType(v Byte) *ScriptBuilder {
	s.hash_type = v
	return s
}

func (s *ScriptBuilder) Args(v Bytes) *ScriptBuilder {
	s.args = v
	return s
}

func NewScriptBuilder() *ScriptBuilder {
	return &ScriptBuilder{code_hash: Byte32Default(), hash_type: ByteDefault(), args: BytesDefault()}
}

type Script struct {
	inner []byte
}

func ScriptFromSliceUnchecked(slice []byte) *Script {
	return &Script{inner: slice}
}
func (s *Script) AsSlice() []byte {
	return s.inner
}

func ScriptDefault() Script {
	return *ScriptFromSliceUnchecked([]byte{53, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func ScriptFromSlice(slice []byte, compatible bool) (*Script, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Script", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Script", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint && 3 == 0 {
		return &Script{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "Script", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "Script", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "Script", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 3 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 3 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = Byte32FromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = ByteFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = BytesFromSlice(slice[offsets[2]:offsets[3]], compatible)
	if err != nil {
		return nil, err
	}

	return &Script{inner: slice}, nil
}

func (s *Script) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *Script) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *Script) Len() uint {
	return s.FieldCount()
}
func (s *Script) IsEmpty() bool {
	return s.Len() == 0
}
func (s *Script) CountExtraFields() uint {
	return s.FieldCount() - 3
}

func (s *Script) HasExtraFields() bool {
	return 3 != s.FieldCount()
}

func (s *Script) CodeHash() *Byte32 {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return Byte32FromSliceUnchecked(s.inner[start:end])
}

func (s *Script) HashType() *Byte {
	start := unpackNumber(s.inner[8:])
	end := unpackNumber(s.inner[12:])
	return ByteFromSliceUnchecked(s.inner[start:end])
}

func (s *Script) Args() *Bytes {
	var ret *Bytes
	start := unpackNumber(s.inner[12:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[16:])
		ret = BytesFromSliceUnchecked(s.inner[start:end])
	} else {
		ret = BytesFromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *Script) AsBuilder() ScriptBuilder {
	ret := NewScriptBuilder().CodeHash(*s.CodeHash()).HashType(*s.HashType()).Args(*s.Args())
	return *ret
}

type WitnessArgsBuilder struct {
	lock        BytesOpt
	input_type  BytesOpt
	output_type BytesOpt
}

func (s *WitnessArgsBuilder) Build() WitnessArgs {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (3 + 1)
	offsets := make([]uint32, 0, 3)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.lock.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.input_type.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.output_type.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.lock.AsSlice())
	b.Write(s.input_type.AsSlice())
	b.Write(s.output_type.AsSlice())
	return WitnessArgs{inner: b.Bytes()}
}

func (s *WitnessArgsBuilder) Lock(v BytesOpt) *WitnessArgsBuilder {
	s.lock = v
	return s
}

func (s *WitnessArgsBuilder) InputType(v BytesOpt) *WitnessArgsBuilder {
	s.input_type = v
	return s
}

func (s *WitnessArgsBuilder) OutputType(v BytesOpt) *WitnessArgsBuilder {
	s.output_type = v
	return s
}

func NewWitnessArgsBuilder() *WitnessArgsBuilder {
	return &WitnessArgsBuilder{lock: BytesOptDefault(), input_type: BytesOptDefault(), output_type: BytesOptDefault()}
}

type WitnessArgs struct {
	inner []byte
}

func WitnessArgsFromSliceUnchecked(slice []byte) *WitnessArgs {
	return &WitnessArgs{inner: slice}
}
func (s *WitnessArgs) AsSlice() []byte {
	return s.inner
}

func WitnessArgsDefault() WitnessArgs {
	return *WitnessArgsFromSliceUnchecked([]byte{16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0})
}

func WitnessArgsFromSlice(slice []byte, compatible bool) (*WitnessArgs, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "WitnessArgs", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "WitnessArgs", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) == HeaderSizeUint && 3 == 0 {
		return &WitnessArgs{inner: slice}, nil
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "WitnessArgs", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "WitnessArgs", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "WitnessArgs", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 3 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 3 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = BytesOptFromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = BytesOptFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = BytesOptFromSlice(slice[offsets[2]:offsets[3]], compatible)
	if err != nil {
		return nil, err
	}

	return &WitnessArgs{inner: slice}, nil
}

func (s *WitnessArgs) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *WitnessArgs) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *WitnessArgs) Len() uint {
	return s.FieldCount()
}
func (s *WitnessArgs) IsEmpty() bool {
	return s.Len() == 0
}
func (s *WitnessArgs) CountExtraFields() uint {
	return s.FieldCount() - 3
}

func (s *WitnessArgs) HasExtraFields() bool {
	return 3 != s.FieldCount()
}

func (s *WitnessArgs) Lock() *BytesOpt {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return BytesOptFromSliceUnchecked(s.inner[start:end])
}

func (s *WitnessArgs) InputType() *BytesOpt {
	start := unpackNumber(s.inner[8:])
	end := unpackNumber(s.inner[12:])
	return BytesOptFromSliceUnchecked(s.inner[start:end])
}

func (s *WitnessArgs) OutputType() *BytesOpt {
	var ret *BytesOpt
	start := unpackNumber(s.inner[12:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[16:])
		ret = BytesOptFromSliceUnchecked(s.inner[start:end])
	} else {
		ret = BytesOptFromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *WitnessArgs) AsBuilder() WitnessArgsBuilder {
	ret := NewWitnessArgsBuilder().Lock(*s.Lock()).InputType(*s.InputType()).OutputType(*s.OutputType())
	return *ret
}
